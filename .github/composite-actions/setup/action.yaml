# https://docs.github.com/en/actions/creating-actions/creating-a-composite-action
# https://www.wesbraga.dev/posts/how-to-use-shared-run-steps-github-actions

name: setup
description: Composite action to make shared setup-related tasks reusable by multiple workflows.
inputs:
  node-version:
    description: Node.js version number; passed to actions/setup-node.
    required: false
  node-version-file:
    description: Path to file specifying the Node.js version number; passed to actions/setup-node.
    required: false
runs:
  using: "composite"
  steps:
    # https://github.com/actions/setup-node
    - name: ⬢ Setup Node.js
      uses: actions/setup-node@v4
      with:
        # https://github.com/actions/setup-node#caching-global-packages-data
        cache: npm
        node-version: ${{ inputs.node-version }}
        node-version-file: ${{ inputs.node-version-file }}
    - name: ⬇️ Install dependencies
      # Omit the `devDependencies` from installation since the `husky` package is the lone entry, and
      # `husky` is only relevant in local development during the repo's initial Git hooks setup.
      # Excerpt from https://docs.npmjs.com/cli/v10/commands/npm-install#omit:
      # > Dependency types to omit from the installation tree on disk.
      # > Note that these dependencies are still resolved and added to the `package-lock.json`
      # > or `npm-shrinkwrap.json` file. They are just not physically installed on disk.
      # > If the resulting omit list includes `'dev'`, then the `NODE_ENV` environment variable
      # > will be set to `'production'` for all lifecycle scripts.
      run: npm clean-install --omit=dev
      shell: bash
    # Verify the integrity of provenance attestations and registry signatures for installed dependencies.
    - name: 👀 Audit dependency signatures
      run: npm audit signatures
      shell: bash
