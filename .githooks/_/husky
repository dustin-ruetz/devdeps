#!/usr/bin/env sh

# Related file: .githooks/_/README.md

# If the $HUSKY environment variable is set to 2 then make the shell
# print the commands (and their arguments) as they're executed.
[ "$HUSKY" = "2" ] && set -x
# n = the name of the Git hook (ex: `commit-msg`)
n=$(basename "$0")
# s = the path of the Git hook script (ex: `.githooks/commit-msg`)
s=$(dirname "$(dirname "$0")")/$n

echo "ü™ù-‚ÑπÔ∏è Executing Git hook script: $s"

# Check if the script exists; if it doesn't exist, log a warning and terminate with a zero status code.
[ ! -f "$s" ] && echo "ü™ù-‚ö†Ô∏è Git hook script not found: $s" && exit 0

# Check if the following file exists; if it does then source it.
i="${XDG_CONFIG_HOME:-$HOME/.config}/husky/init.sh"
[ -f "$i" ] && . "$i"

# If the $HUSKY environment variable is set to 0 then terminate with a zero status code.
[ "${HUSKY-}" = "0" ] && exit 0

# Add the /node_modules/.bin directory to $PATH.
export PATH="node_modules/.bin:$PATH"

# Execute the Git hook script file along with its passed arguments.
sh -e "$s" "$@"
# Store the exit status code.
c=$?

# If the Git hook script exits with a non-zero status code then log the error(s) and exit with the status code.
[ $c != 0 ] && echo "üê∂-‚ùå ERR_HUSKY - $n script failed (code $c)"
[ $c = 127 ] && echo "üê∂-‚ùå ERR_HUSKY - command not found in PATH=$PATH"
exit $c
