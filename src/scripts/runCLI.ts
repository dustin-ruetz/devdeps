import {spawn} from "node:child_process";
import {getAbsoluteRepoRootPath} from "../utils/getAbsoluteRepoRootPath.js";
import {getIsDevDepsRepo} from "../utils/getIsDevDepsRepo.js";
import {makeCachePath} from "../utils/makeCachePath.js";
import {nodeModulesPackagePath} from "../constants.js";

/**
 * @description Executes the CLI program of an installed `devDependencies` package and determines the path to its configuration file.
 * @param cli - The CLI program to execute. Should be a package listed in the `devDependencies` of the `package.json` file.
 * @param args - The array of args (i.e. flags and their arguments) passed to the CLI program.
 */
export const runCLI = (cli: "eslint" | "jest" | "prettier", args: string[]) => {
	// Automatically add specific arguments to the command based on the CLI program that is being run.
	// #region AUTO_ADDED_ARGS
	const cacheFlag = "--cache";
	const cacheLocationFlag = "--cache-location";
	let cliEmoji = "";

	// case "commitlint":
	// cliEmoji = "💬"
	//
	// case "lint-staged":
	// cliEmoji = "🛡️"

	switch (cli) {
		// https://eslint.org/docs/latest/use/command-line-interface
		case "eslint": {
			cliEmoji = "📚";
			const cacheLocationArg = `./${makeCachePath(".eslintcache")}`;
			args.unshift(cacheFlag, cacheLocationFlag, cacheLocationArg);
			break;
		}
		// https://jestjs.io/docs/cli
		case "jest":
			cliEmoji = "🃏";
			args.unshift(cacheFlag);
			break;
		// https://prettier.io/docs/en/cli.html
		case "prettier": {
			cliEmoji = "🪞";
			const cacheLocationArg = `./${makeCachePath(".prettiercache")}`;
			args.unshift(
				cacheFlag,
				cacheLocationFlag,
				cacheLocationArg,
				"--ignore-path",
				"./.gitignore",
			);
			break;
		}
	}
	// #endregion AUTO_ADDED_ARGS

	// #region CONFIG_ARGS
	const configFlag = "--config";
	const configFlagIndex = args.findIndex(
		/**
		 * Ideally the below function would also check for the presence of the short-form `-c` flag as well,
		 * but unfortunately the `commitlint` CLI uses `-c` as its short syntax for the `--color` flag.
		 * @link https://commitlint.js.org/reference/cli.html#cli
		 */
		(arg) => arg === configFlag,
	);
	const configArg = args[configFlagIndex + 1];
	const hasConfigFlag = configFlagIndex !== -1;
	const hasConfigArg = configArg !== undefined;

	const absoluteRepoRootPath = getAbsoluteRepoRootPath();
	const isDevDepsRepo = getIsDevDepsRepo(absoluteRepoRootPath);

	/**
	 * Normalize how the `--config` flag and its argument are passed to the CLI program,
	 * i.e. ensure that they are the first two items in the `args` array.
	 */
	// 1. If they _are_ passed:
	if (hasConfigFlag && hasConfigArg) {
		// 1a. Remove them from the `args` array.
		// eslint-disable-next-line no-magic-numbers
		args.splice(configFlagIndex, 2);
		// 1b. Re-insert them at the beginning of the `args` array.
		args.unshift(configFlag, configArg);
	}
	// 2. If they _are not_ passed:
	else {
		const configFilePath = `lib/config/${cli}.config.js`;

		// 2a. Determine the path to the configuration file depending on the repo.
		const configArg = isDevDepsRepo
			? `./${configFilePath}`
			: `./${nodeModulesPackagePath}/${configFilePath}`;
		// 2b. Prepend the `--config` flag and its argument to the existing `args` array.
		args.unshift(configFlag, configArg);
	}
	// #endregion CONFIG_ARGS

	// #region LOG_COMMAND
	let runCLIpath = "lib/scripts/runCLI.js";
	runCLIpath = isDevDepsRepo
		? `./${runCLIpath}`
		: `./${nodeModulesPackagePath}/${runCLIpath}`;
	// Log out the command that is being run (and all of the flags/arguments passed to it) for ease-of-reference.
	// eslint-disable-next-line no-console
	console.log(
		`${cliEmoji} ${cli} command being run (as generated by ${runCLIpath}):` +
			"\n" +
			`> ${cli} ${args.join(" ")}`,
	);
	// #endregion LOG_COMMAND

	// It's very difficult to test the methods on the `spawn` function,
	// so exclude these lines from the test coverage report.
	/* v8 ignore next 9 */
	spawn(cli, [...args], {stdio: "inherit"}).on("close", (exitCode) => {
		if (exitCode !== 0) {
			// eslint-disable-next-line no-console
			console.error(
				`${cliEmoji} ${cli} terminated with non-zero exit code ${String(exitCode)}.`,
			);
		}
		process.exit(exitCode);
	});
};
